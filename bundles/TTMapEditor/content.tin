#nop #################################################################################;
#nop Edycja map;
#nop #################################################################################;
#alias {/reconnect} {
    #line substitute {variables} {#brain {#port zap $brainId}};
    TTMapEditorAddress;
} {1};

#alias {/reload} {
    #line substitute {variables} {#brain {#port send $brainId {RELOAD}}};
} {1};

#alias {/mapka} {/help TTMapEditor} {1};

#alias {TTMapEditorAddress} {
    #var tmp {$ConfigManager_Configs[TTMapEditorAddress]};
    #replace tmp {,} {;};
    #list connstr create {$tmp};
    #unvar tmp;
    #if {"$connstr[1]" != ""} {
        #if {"$connstr[2]" != ""} {
            #delay {1} {
                #echo {%s} {<158>TTMapEditor: Probing $connstr[1] @ $connstr[2]};
                #brain #port call {$connstr[1]} {$connstr[2]};
            };
            #delay {1.5} {
                #line substitute variables {
                    #brain #var mapkaId $mapkaId;
                };
            }
        };
    };
};

#brain #action {<PORT> MCREATE %1 %2} {
    #line substitute {variables} {
        #rpg #map at {%1} {#map dig %2};
    };
} {1};

#brain #action {<PORT> MARK %d %w} {
    #line substitute {variables} {
        #rpg #map at {%1} {#map set roomweight $roominfo[%2][index]};
        #if {"$roominfo[%2][symbol]" != ""} {
            #rpg #map at {%1} {#map set roomsymbol $roominfo[%2][symbol]};
        } {
            #rpg #map at {%1} {#map set roomsymbol;};
        };
        #if {"$roominfo[%2][command]" != ""} {
            #rpg #map at {%1} {#map set roomarea $roominfo[%2][command]};            
        };
    };
} {1};

#brain #action {<PORT> DEL %1 %2} {
    #line substitute {variables} {
        #rpg #map at {%1} {#map del %2};
    };
} {1};

#brain #action {<PORT> NOTE %1 %2 %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #nop echo {PORT NOTE %1 %2 %3};
            #map get roomdata vroomdata;
            #list vroomdata size vroomdatasize;

            #format timeStamp {%t} {%d%m%y %r};
            #var roomdatavalue[author] %2;
            #var roomdatavalue[stamp] $timeStamp;
            #var roomdatavalue[message] {%3};
            #var roomdatavalue[type] {test};

            #if {$vroomdatasize > 0} {
                #math vr {$vroomdatasize + 1};
                #list vroomdata add {{$roomdatavalue}};
            } {
                #list vroomdata create;
                #list vroomdata add {{$roomdatavalue}};
            };
            #map set roomdata $vroomdata;
            #map set roomnote {data};
        };
    };
} {1};

#brain #action {<PORT> BIND %1 %2 %3 %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #map get roomdata vroomdata;
            #list vroomdata size vroomdatasize;

            #format timeStamp {%t} {%d%m%y %r};
            #var roomdatavalue[author] %2;
            #var roomdatavalue[stamp] $timeStamp;
            #var roomdatavalue[message] {%4};
            #var roomdatavalue[type] {command};
            #var roomdatavalue[macrokey] {%3};

            #if {$vroomdatasize < 1} {
                #list vroomdata create;
                #list vroomdata add {{$roomdatavalue}};             
            } {
                #var searchforbind 0;
                #foreach {*vroomdata[]} {vr} {
                    #if {"$vroomdata[$vr][type]" == "command"} {
                        #if {"$vroomdata[$vr][macrokey]" == "%3"} {
                            #var vroomdata[$vr][message] {%4};
                            #var roomdatavalue[author] %2;
                            #var roomdatavalue[stamp] $timeStamp;
                            #var searchforbind 1;
                        };
                    };
                };
                #if {$searchforbind < 1} {
                    #math vr {$vroomdatasize + 1};
                    #list vroomdata add {{$roomdatavalue}};             
                };
            };
            #map set roomdata $vroomdata;
            #map set roomnote {data};
        };
    };
} {1};

#brain #action {<PORT> EVENT %d %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {#map set roomsymbol {<168>@<088>}};
        #rpg #map at {%1} {#map set roomarea {QB %2}};
    };
} {1};

#brain #action {<PORT> UNEVENT %d} {
    #line substitute {variables} {
        #rpg #map at {%1} {#map set roomsymbol};
        #rpg #map at {%1} {#map set roomarea};
    };
} {1};

#brain #action {<PORT> COMMAND %d %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {#map set roomsymbol {<138>E<088>}};
        #rpg #map at {%1} {#map set roomarea {%2}};
    };
} {1};


#brain #action {<PORT> ROOMSHORT %d %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #map get roomsymbol vroomsymbol;
            #map set roomdesc {%2};
            #if {"$vroomsymbol" == "<faa>?<088>"} {
                #map set roomsymbol {};
            };
        };
    };
};

#brain #action {<PORT> ROOMEXITS %d %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #map set roomname {%2};
            #map get roomcolor vroomcolor;
            #if {"$vroomcolor" == "<faa>"} {
                #map set roomcolor {};
            };
        };
    };
};

#brain #action {<PORT> NAME %d %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #map set roomnote {%2};
        };
    };
}

#brain #action {<PORT> HIDE %d %w} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #line substitute variables {
                #map exitflag %2 hide on;
                #map exit %2 color <138>;
            };
        };
    };
}

#brain #action {<PORT> UNHIDE %d %w} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #line substitute variables {
                #map exitflag %2 hide off;
                #map exit %2 color;
            };
        };
    };
};

#brain #action {<PORT> LINKB %d %w %d} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #line substitute variables {
                #map link %2 %3 both;
            };
        };
    };
};

#brain #action {<PORT> UNLINKB %d %w} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #line substitute variables {
                #map unlink %2 both;            
            };
        };
    };
};

#brain #action {<PORT> TERRAIN %d %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #line substitute variables {
                #map set roomterrain %2;
            };
            /symbol;
        };
    };
} {1};

#brain #action {<PORT> LINK %d %w %d} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #line substitute variables {
                #map link %2 %3;
            };
        };
    };
};

#brain #action {<PORT> UNLINK %d %w} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #line substitute variables {
                #map unlink %2;         
            };
        };
    };
};

#brain #action {<PORT> SPECIAL %d %w} {
    #line sub {variables} {
        #rpg #map at {%1} {
            #map exit %2 color <118>;
        };
    };
};

#brain #action {<PORT> LONG %d %w} {
    #line sub {variables} {
        #rpg #map at {%1} {
            #line substitute variables {#map insert %2 void};
        };
    };
};

#brain #action {<PORT> SHORT %d %w} {
    #line sub {variables} {
        #rpg #map at {%1} {
            #line substitute variables {#map uninsert %2 void};
        };
    };
};

#brain #action {<PORT> VOID %d} {
    #line sub {variables} {
        #rpg #map at {%1} {
            #line substitute variables {#map roomflag void on};
        };
    };
};


#brain #action {<PORT> MEXIT %d %w %d %*} {
    #line substitute {variables} {
        #rpg #map at {%1} {
            #map exit %2 command {%4};
            #map exit %2 color <118>;
            #map link {%4} %3;
        };
    };
};

#brain #action {<PORT> COLOR %d %S} {
    #var tmpsymbol {%2};
    #replace {tmpsymbol} {-} {<};
    #replace {tmpsymbol} {+} {>};
    #line substitute {variables} {
        #rpg #map at {%1} {#map set roomcolor {$tmpsymbol}};
    };
};

#brain #action {<PORT> Connection made to %S.} {
    #rpg {
        #echo {%s} {<158>TTMapEditor: <118>Connected.};
    };
    #line substitute {variables} {
        #rpg #var brainId %1;
    };
};

#brain #action {<PORT> CHECKSUM %d} {
    #line substitute {variables} {
        #rpg {
            #map at {1} {#map get roomdata tmprd};
            #if {"$tmprd" == "%1"} {
                #echo {%s} {<158>TTMapEditor: <128>Maps are in sync, writing is enabled!};
                #var PONGED 2;
            } {
                #echo {%s} {<158>TTMapEditor: <138>Maps are not in sync, writing is disabled!};
                #var PONGED 1;
            };
        };
    };
}

#brain #action {<PORT> CHAT %w %w %*} {
    #line substitute variables {
        #rpg topchat_add_static <128>[%1] <168>%2<088> : <128>%3;
    };
};

#brain #action {<PORT> IDENTREQ %*} {
    #line substitue variables {
        #rpg #var chatIdent %1;
    };
} {1};

#alias {show_ponged_error} {
    #echo {%s} {<158>TTMapEditor: <118>You are not connected!<088>};
};

#alias {show_ponged_error2} {
    #echo {%s} {<158>TTMapEditor: <138>Read-only mode: Please pull the latest map.<088>};
};

#alias {/r$} {
    #if {$PONGED > 0} {
        #map get roomvnum tmproomvnum;
        #line substitute {variables} {#brain {#port send $brainId {COLOR $tmproomvnum R}}}; 
    } {show_ponged_error};
} {1};
#alias {/y$} {
    #if {$PONGED > 0} {
        #map get roomvnum tmproomvnum;
        #line substitute {variables} {#brain {#port send $brainId {COLOR $tmproomvnum Y}}};
    } {show_ponged_error};
} {1};

#alias {/c$} {
    #if {$PONGED > 0} {
        #line substitute {variables} {#brain {#port send $brainId {CLEAR}}};
    } {show_ponged_error};
} {1};

#alias {/disc$} {
    #if {$PONGED == 2} {
        #map get roomvnum voom;
        #map get roomterrain rter;
        /terrain;
        #line substitute {variables} {#brain {#port send $brainId {ROOMEXITS $voom $current_room_exits}}};
        #line substitute {variables} {#brain {#port send $brainId {ROOMSHORT $voom $current_room_short_desc}}};
        #line substitute {variables} {#brain {#port send $brainId {TERRAIN $voom $tmpterrain}}};
    } {show_ponged_error2};
} {1};

#alias {/g} {
    #if {$PONGED > 0} {
        #line substitute variables {
            #brain {#port send $brainId {CHAT general $AVATAR_NAME %0}};
        };
    } {show_ponged_error2};
} {1};

#alias {/ter} {
    #map get roomvnum voom;
    #if {$PONGED == 2} {
            #line substitute {variables} {#brain {#port send $brainId {TERRAIN $voom %1}}};
    } {show_ponged_error2};
} {1};

#line substitute {variables} {#brain {#port send $brainId {TERRAIN $voom $tmpterrain}}};

#alias {/map link %w %d} {
    #if {$PONGED == 2} {
    #map get roomvnum voom;
    #line substitute {variables} {#brain {#port send $brainId {LINK $voom %1 %2}}};
    } {show_ponged_error2};
} {1};

#alias {/map linkb %w %d} {
    #if {$PONGED == 2} {
    #map get roomvnum voom;
    #line substitute {variables} {#brain {#port send $brainId {LINKB $voom %1 %2}}};
    } {show_ponged_error2};
} {1};

#alias {/map unlinkb %w} {
    #if {$PONGED == 2} {
    #map get roomvnum voom;
    #line substitute {variables} {#brain {#port send $brainId {UNLINKB $voom %1}}};
    } {show_ponged_error2};
} {1};

#alias {/map unlink %w} {
    #if {$PONGED == 2} {
    #map get roomvnum voom;
    #line substitute {variables} {#brain {#port send $brainId {UNLINK $voom %1}}};
    } {show_ponged_error2};
} {1};

#alias {/map hide %w} {
    #if {$PONGED == 2} {
    #map get roomvnum voom;
    #line substitute {variables} {#brain {#port send $brainId {HIDE $voom %1}}};
    } {show_ponged_error2};
} {1};

#alias {/map unhide %w} {
    #if {$PONGED == 2} {
    #map get roomvnum voom;
    #line substitute {variables} {#brain {#port send $brainId {UNHIDE $voom %1}}};
    } {show_ponged_error2};
} {1};

#alias {/map dig %w} {
    #if {$PONGED == 2} {
    #map get roomvnum v;
    #line substitute {variables} {#brain {#port send $brainId {MCREATE $v %1}}};
    } {show_ponged_error2};
} {1};

#alias {/mark as %w$} {
    #if {$PONGED == 2} {

    #switch {"%1"} {
        #case {"vendor"} {};
        #case {"checkpoint"} {};
        #case {"water"} {};
        #case {"bank"} {};
        #case {"post"} {};
        #case {"safe"} {};
        #case {"food"} {};
        #case {"quest"} {};
        #case {"info"} {};
        #case {"danger"} {};
     	#case {"port"} {};
    	#case {"herb"} {};
    	#case {"trap"} {};
    	#case {"smith"} {};
     	#case {"training"} {};
    	#case {"knowledge"} {};
    	#case {"storage"} {};
        #case {"forest"} {};
        #case {"field"} {};
        #case {"beach"} {};
        #case {"river"} {};
        #case {"1"} {};
        #case {"bush"} {};
        #case {"swamp"} {};
        #case {"lava"} {};
        #case {"mountain"} {};
        #case {"desert"} {};
        #case {"road"} {};
        #case {"graveyard"} {};

        #default {
            #echo {%s} {Niedozwolona wartosc: %1};
            #return;
        };
    }
    #map get roomvnum v;
    #line substitute {variables} {#brain {#port send $brainId {MARK $v %1}}};
    } {show_ponged_error2};
} {1};

#alias {/map del %w} {
    #if {$PONGED == 2} {
    #map get roomvnum v;
    #line substitute {variables} {#brain {#port send $brainId {DEL $v %1}}};
    } {show_ponged_error2};
} {1};

#alias {/map wyj %w %*} {
    #if {$PONGED == 2} {
    #map get roomvnum v;
    #line substitute {variables} {#brain {#port send $brainId {MEXIT $v %1 %2}}};
    } {show_ponged_error2};
} {1};

#alias {/map spe %w} {
    #if {$PONGED == 2} {
    #map get roomvnum v;
    #line sub {variables} {#brain {#port send $brainId {SPECIAL $v %1}};};
    } {show_ponged_error2};
} {1};


#alias {/map void} {
    #if {$PONGED == 2} {
        #map get roomvnum v;
        #line sub {variables} {#brain {#port send $brainId {VOID $v}}};
    } {show_ponged_error2};
} {1};

#alias {/map long %w} {
    #if {$PONGED == 2} {
        #map get roomvnum v;
        #line sub {variables} {#brain {#port send $brainId {LONG $v %1}}};
    } {show_ponged_error2};
} {1};

#alias {/map short %w} {
    #if {$PONGED == 2} {
        #map get roomvnum v;
        #line sub {variables} {#brain {#port send $brainId {SHORT $v %1}}};
    } {show_ponged_error2};
} {1};


#alias {/n %*} {
    #if {$PONGED == 2} {
        #map get roomvnum v;
        #line substitute {variables} {#brain {#port send $brainId {NOTE $voom $AVATAR_NAME %1}}};
        #nop echo {#brain {#port send $brainId {NOTE $voom $AVATAR_NAME %1}}};
    } {show_ponged_error2};
} {1};

#alias {/nc {F1|F2|F3} %*} {
    #if {$PONGED == 2} {
        #map get roomvnum v;
        #line substitute {variables} {#brain {#port send $brainId {BIND $voom $AVATAR_NAME %1 %2}}};
        #nop echo {#brain {#port send $brainId {NOTE $voom $AVATAR_NAME %1}}};
    } {show_ponged_error2};
} {1};

#alias {/s$} {
    #unvar checkpoints;
    #var cpcmd 1;
    #map list {roomnote} {data} {variable} {checkpoints};
    #echo {alias dystans pokoj ktododal};
    #echo {-------------------------------};
    #foreach {*checkpoints[]} {vcpv} {
        #math vcpvcheck {0};
        #math vcpvcheck {($vcpvcheck + $checkpoints[$vcpv][distance]) / 2 - 3};

        #map at {$vcpv} {
            #map get roomdata RDtable;
        };

        #if {$vcpvcheck < 100} {
            #replace {RDtable[$rdv][message]} {%1} {<138>%1<028>};
            #echo {%-6s %-6s %+5s %s %s %s} {idz$cpcmd} {$vcpvcheck} {$vcpv} {<178>$RDtable[$rdv][author]<088>} {$RDtable[$rdv][stamp]} {<028>$RDtable[$rdv][message]};
        };

    #if {$vcpvcheck < 10} {#line substitute variables {#alias {idz$cpcmd} {#map run {$vcpv} {0.5};};};#math {cpcmd} {$cpcmd + 1};};
    #elseif {$vcpvcheck < 50} {#line substitute variables {#alias {idz$cpcmd} {#map run {$vcpv} {1};};};#math {cpcmd} {$cpcmd + 1};};
    #elseif {$vcpvcheck < 100} {#line substitute variables {#alias {idz$cpcmd} {#map run {$vcpv} {2};};};#math {cpcmd} {$cpcmd + 1};};

    };

} {1};

#event {END OF PATH} {
    #var pathinprogress 0;
};

#alias {/s %*} {
    #unvar checkpoints;
    #var cpcmd 1;
    #map list {roomnote} {data} {variable} {checkpoints};
    #echo {alias dystans pokoj ktododal};
    #echo {-------------------------------};
    #foreach {*checkpoints[]} {vcpv} {
        #math vcpvcheck {0};
        #math vcpvcheck {($vcpvcheck + $checkpoints[$vcpv][distance]) / 2 - 3};
        #map at {$vcpv} {
            #map get roomdata RDtable;
        };
        #list RDtable size rdTableSize;

        #if {$rdTableSize > 1} {
            #foreach {*RDtable[]} {rdv} {
                #regex {$RDtable[$rdv][message]} {%1} {
                        #replace {RDtable[$rdv][message]} {%1} {<138>%1<028>};
                        #echo {%-6s %-6s %+5s %s %s %s} {idz$cpcmd} {$vcpvcheck} {$vcpv} {<178>$RDtable[$rdv][author]<088>} {$RDtable[$rdv][stamp]} {<028>$RDtable[$rdv][message]};
                } {
                    #if {"$RDtable[1][message]" == "%1"} {
                        #replace {RDtable[1][message]} {%1} {<138>%1<028>};
                        #echo {%-6s %-6s %+5s %s %s %s} {idz$cpcmd} {$vcpvcheck} {$vcpv} {<178>$RDtable[1][author]<088>} {$RDtable[1][stamp]} {<028>$RDtable[1][message]};                    
                    }
                }
            };
        } {
            #regex {$RDtable[1][message]} {%1} {
                        #map find {$vcpv};
                        #replace {RDtable[1][message]} {%1} {<138>%1<028>};
                        #echo {%-6s %-6s %+5s %s %s %s} {idz$cpcmd} {$vcpvcheck} {$vcpv} {<178>$RDtable[1][author]<088>} {$RDtable[1][stamp]} {<028>$RDtable[1][message]};
            };
        };

        #if {$vcpvcheck < 10} {#line substitute variables {#alias {idz$cpcmd} {#map run {$vcpv} {0.2};};};#math {cpcmd} {$cpcmd + 1};#var pathinprogress 1};
        #elseif {$vcpvcheck < 50} {#line substitute variables {#alias {idz$cpcmd} {#map run {$vcpv} {0.5};};};#math {cpcmd} {$cpcmd + 1};#var pathinprogress 1};
        #elseif {$vcpvcheck < 100} {#line substitute variables {#alias {idz$cpcmd} {#map run {$vcpv} {1};};};#math {cpcmd} {$cpcmd + 1};#var pathinprogress 1};
    };
} {1};

#alias {/event %*} {
    #if {$PONGED == 2} {
        #map get roomvnum tmproomvnum;
        #line substitute {variables} {#brain {#port send $brainId {EVENT $tmproomvnum %1}}};
    } {show_ponged_error};
} {1};

#alias {/unevent} {
    #if {$PONGED == 2} {
        #map get roomvnum tmproomvnum;
        #line substitute {variables} {#brain {#port send $brainId {UNEVENT $tmproomvnum}}};
    } {show_ponged_error};
} {1};

#alias {/command %*} {
    #if {$PONGED == 2} {
        #map get roomvnum tmproomvnum;
        #line substitute {variables} {#brain {#port send $brainId {COMMAND $tmproomvnum %1}}};
    } {show_ponged_error};
} {1};

#alias {/symbol} {
    #var tmpterrain {};
    #var rmsym {};
    #var rmcol {};
    #map get roomterrain tmpterrain;
    #switch {"$tmpterrain"} {
                    #case {"air"}           {#var rmcol <268>;#var rmsym {}};
                    #case {"alley"}         {#var rmcol <248>;#var rmsym <248>. .<088>};
                    #case {"ashen_field"}       {#var rmcol <278>;#var rmsym <278>, `<088>};
                    #case {"areaexit"}      {#var rmcol <168>;#var rmsym <168>[<278>?<168>]<088>};
                    #case {"aylorcity"}     {#var rmcol <278>;#var rmsym <278>[ ]<088>};
        #case {"studnia"}       {#var rmcol <148>;#var rmsym <AAF><178> O <088>};
        #case {"studnia_b"}       {#var rmcol <148>;#var rmsym <AAB><118> O <088>};
        #case {"szczelina"}       {#var rmcol <148>;#var rmsym <G08><118><fca> O <088>};
        
        #case {"plaza"}         {#var rmcol <138>;#var rmsym {}};
                    #case {"bloodyhall"}        {#var rmcol <218>;#var rmsym {}};
                    #case {"bloodyroom"}        {#var rmcol <118>;#var rmsym {}};
                    #case {"bookshelves"}       {#var rmcol <238>;#var rmsym <238>"""<088>};
                    #case {"bookshelves_ns"}    {#var rmcol <238>;#var rmsym <238>=<148>.<238>=<088>};
        #case {"most"}        {#var rmcol <238>;#var rmsym {}};
                    #case {"cabin"}         {#var rmcol <238>;#var rmsym <238># #<088>};
        #case {"jaskinia"}          {#var rmcol <248>;#var rmsym {}};
                    #case {"castle"}        {#var rmcol <178>;#var rmsym <278>###<088>};
        #case {"symbol"}     {#var rmcol <258>;#var rmsym {}};
                    #case {"chessblack"}        {#var rmcol <248>;#var rmsym <248>[ ]<088>};
                    #case {"chesswhite"}        {#var rmcol <178>;#var rmsym <178>[ ]<088>};
                    #case {"city"}          {#var rmcol <278>;#var rmsym <278>. .<088>};
                    #case {"city_underground"}  {#var rmcol <238>;#var rmsym <238>. .<088>};
                    #case {"cloud1"}        {#var rmcol <178>;#var rmsym <178>~ ~<088>};
                    #case {"cloud2"}        {#var rmcol <108>;#var rmsym <108>~ ~<088>};
                    #case {"cloud3"}        {#var rmcol <278>;#var rmsym <128>.<138>*<088>~<088>};
                    #case {"crossroad_ews"}     {#var rmcol <278>;#var rmsym <278>-+-<088>};
                    #case {"crossroad_nw"}      {#var rmcol <278>;#var rmsym <278>-+ <088>};
                    #case {"crossroad_se"}      {#var rmcol <278>;#var rmsym <278> +-<088>};
        #case {"krypta"}         {#var rmcol <248>;#var rmsym {}};
                    #case {"dark"}          {#var rmcol <208>;#var rmsym <208>[ ]<088>};
                    #case {"dead_field"}        {#var rmcol <238>;#var rmsym <238>, `<088>};
                    #case {"dead_forest"}       {#var rmcol <238>;#var rmsym <238>( *<088>};
                    #case {"dead_jungle"}       {#var rmcol <238>;#var rmsym <238>* *<088>};
        #case {"pustynia"}        {#var rmcol <238>;#var rmsym {}};
                    #case {"dungeon"}       {#var rmcol <248>;#var rmsym <248># #<088>};
                    #case {"dustdevil"}     {#var rmcol <238>;#var rmsym <238>.VV<088>};
        #case {"pole"}         {#var rmcol <228>;#var rmsym {}};
        #case {"laka"}        {#var rmcol <228>;#var rmsym {}};
        #nop case {"gaszcz"}        {#var rmcol <228>;#var rmsym <228>, .<088>};
        #case {"zagajnik"}        {#var rmcol <228>;#var rmsym {}};
                    #case {"flowers1"}      {#var rmcol <178>;#var rmsym <168>*<158>*<138>*<088>};
                    #case {"flowers2"}      {#var rmcol <178>;#var rmsym <158>*<168>*<138>*<088>};
        #case {"las"}        {#var rmcol <228>;#var rmsym {}};
        #case {"las_iglasty"}        {#var rmcol <228>;#var rmsym {}};
        #case {"las_bukowy"}        {#var rmcol <228>;#var rmsym {}};    
        #case {"las_sosnowy"}        {#var rmcol <228>;#var rmsym {}};                
                    #case {"fountain"}      {#var rmcol <278>;#var rmsym <278>( )<088>};
        #case {"cmentarz"}     {#var rmcol <238>;#var rmsym {}};
        #case {"korytarz"}       {#var rmcol <268>;#var rmsym {}};
                    #case {"hell1"}         {#var rmcol <218>;#var rmsym <218>` <118>,<088>};
                    #case {"hell2"}         {#var rmcol <218>;#var rmsym <218>~ .<088>};
                    #case {"hell3"}         {#var rmcol <218>;#var rmsym <218>~ <118>^<088>};
                    #case {"hell4"}         {#var rmcol <218>;#var rmsym <118>^ <218>^<088>};
        #case {"oltarz"}      {#var rmcol <218>;#var rmsym {}};
        #case {"lawa"}        {#var rmcol <218>;#var rmsym {}};
        #case {"magma"}       {#var rmcol <018>;#var rmsym {}};
                    #case {"hellhall"}      {#var rmcol <218>;#var rmsym <088>. <218>.<088>};
                    #case {"hellinside"}        {#var rmcol <218>;#var rmsym <218>[ ]<088>};
        #case {"wzgorze"}         {#var rmcol <228>;#var rmsym {}};
                    #case {"hut"}           {#var rmcol <238>;#var rmsym <238>[ ]<088>};
                    #case {"ice"}           {#var rmcol <178>;#var rmsym <178>~ ~<088>};
                    #case {"icehills"}      {#var rmcol <178>;#var rmsym <178>^ ~<088>};
                    #case {"icemount"}      {#var rmcol <178>;#var rmsym <178>A A<088>};
        #case {"wnetrze"}        {#var rmcol <fca>;#var rmsym {}};
                    #case {"insideice"}     {#var rmcol <178>;#var rmsym <178>[ ]<088>};
        #case {"gaszcz"}        {#var rmcol <228>;#var rmsym {}};
                    #case {"lightning"}     {#var rmcol <138>;#var rmsym <138>  /<088>};
                    #case {"mist"}          {#var rmcol <178>;#var rmsym <178>~ ~<088>};
                    #case {"moon"}          {#var rmcol <248>;#var rmsym <248> * <088>};
        #case {"gory"}      {#var rmcol <238>;#var rmsym {}};
                    #case {"mountain_cyan"}     {#var rmcol <268>;#var rmsym <268>A A<088>};
                    #case {"ocean"}         {#var rmcol <148>;#var rmsym <148>~ ~<088>};
                    #case {"ocean2"}        {#var rmcol <148>;#var rmsym <148>~ ^<088>};
                    #case {"ocean3"}        {#var rmcol <148>;#var rmsym <148>^ ~<088>};
                    #case {"ocean4"}        {#var rmcol <148>;#var rmsym <148>, ~<088>};
                    #case {"office"}        {#var rmcol <238>;#var rmsym <238>[ ]<088>};
                    #case {"palace_room"}       {#var rmcol <138>;#var rmsym <138>[ ]<088>};
                    #case {"pillar"}        {#var rmcol <278>;#var rmsym <278> * <088>};
                    #case {"plain"}         {#var rmcol <238>;#var rmsym <238>, `<088>};
                    #case {"quicksand"}     {#var rmcol <138>;#var rmsym <138>%%%<088>};
                    #case {"rain"}          {#var rmcol <148>;#var rmsym <148>'.'<088>};
                    #case {"rainbow"}       {#var rmcol <148>;#var rmsym <118>)<138>)<148>)<088>};
                    #case {"redcarpet"}     {#var rmcol <118>;#var rmsym <118>. .<088>};
        #case {"rzeka"}         {#var rmcol <148>;#var rmsym {}};
        #case {"trakt"}          {#var rmcol <278>;#var rmsym {}};
                    #case {"road_crossroads"}   {#var rmcol <278>;#var rmsym <278>-+-<088>};
                    #case {"road_eastwest"}     {#var rmcol <278>;#var rmsym <278>- -<088>};
        #case {"skaly"}         {#var rmcol <238>;#var rmsym {}};
                    #case {"ruins"}         {#var rmcol <178>;#var rmsym <178>{<148>*<178>}<088>};
                    #case {"ship"}          {#var rmcol <238>;#var rmsym <238>V_V<088>};
        #case {"brzeg"}         {#var rmcol <268>;#var rmsym {}};
                    #case {"shop"}          {#var rmcol <138>;#var rmsym <138>*<128>$<138>*<088>};
                    #case {"smallroad"}     {#var rmcol <278>;#var rmsym <228>,<278>|<228>`<088>};
                    #case {"smallroad_ew"}      {#var rmcol <278>;#var rmsym <278>---<088>};
                    #case {"snow"}          {#var rmcol <178>;#var rmsym <178>. ,<088>};
                    #case {"space1"}        {#var rmcol <108>;#var rmsym <208>[ ]<088>};
                    #case {"underground"}       {#var rmcol <148>;#var rmsym <148>. .<088>};
                    #case {"underwater"}        {#var rmcol <248>;#var rmsym <248>~ ~<088>};
                    #case {"vertical_shaft"}    {#var rmcol <278>;#var rmsym <278>< ><088>};
                    #case {"volcano"}       {#var rmcol <218>;#var rmsym <218>A A<088>};
                    #case {"waterswim"}     {#var rmcol <148>;#var rmsym <148>~ ~<088>};
                    #case {"waternoswim"}       {#var rmcol <148>;#var rmsym <148>~ ~<088>};
                    #case {"well"}          {#var rmcol <238>;#var rmsym <238>(<148>~<238>)<088>};
                    #case {"wind1"}         {#var rmcol <168>;#var rmsym <168>~ ~<088>};
                    #case {"wind2"}         {#var rmcol <108>;#var rmsym <108>~-~<088>};
        #case {"zaulek"}           {#var rmcol {};#var rmsym {}};
        #case {"droga"}            {#var rmcol {};#var rmsym {};};
        #case {"sciezka"}          {#var rmcol <fca>;#var rmsym {}};
        #case {"chata"}            {#var rmcol <fca>;#var rmsym {}};
                    #case {"space2"}        {#var rmcol <278>;#var rmsym <278>*  <088>};
                    #case {"space3"}        {#var rmcol <278>;#var rmsym <278>  .<088>};
                    #case {"space4"}        {#var rmcol <108>;#var rmsym <208>[ ]<088>};
                    #case {"stairs"}        {#var rmcol <278>;#var rmsym <278>.@.<088>};
                    #case {"sun"}           {#var rmcol <138>;#var rmsym <138> * <088>};
        #case {"bagno"}         {#var rmcol <228>;#var rmsym {}};
                    #case {"swiatynia"}        {#var rmcol <268>;#var rmsym <268>{<178>+<268>}<088>};
                    #case {"tornado"}       {#var rmcol <108>;#var rmsym <108>.VV<088>};
                    #case {"trail_ew"}      {#var rmcol <238>;#var rmsym <238>. .<088>};
        #case {"tunel"}        {#var rmcol <238>;#var rmsym {}};
        #case {"osada"}        {#var rmcol <fca>;#var rmsym {}};
        #case {"wioska"}       {#var rmcol <118><fca>;#var rmsym {}};
        #case {"plac"}       {#var rmcol <118><fca>;#var rmsym {}};        
    };

    #if {"$rmcol" != ""} {
        #map set roomcolor $rmcol;
        #var rc $rmcol;
        #line substitute variables {#map exit w color $rc;#map exit e color $rc;#map exit n color $rc;#map exit sw color $rc;#map exit se color $rc;#map exit s color $rc;#map exit ne color $rc;#map exit nw color $rc;#map set roomsymbol {}};
    };
    #map set roomsymbol $rmsym;
} {1};


#alias {/terrain} {
    #var tmpterrain {};
    #nop LASY;
    #regex {$gmcp_short} {%i{las|lesi}} {#var tmpterrain las};
    #regex {$gmcp_short} {%iswierk} {#var tmpterrain las_iglasty};
    #regex {$gmcp_short} {%ibuk} {#var tmpterrain las_bukowy};
    #regex {$gmcp_short} {%isosn} {#var tmpterrain las_sosnowy};
    #nop INNE ZIELENIE;
    #regex {$gmcp_short} {%izagajnik} {#var tmpterrain ogrod};
    #regex {$gmcp_short} {%i{laka|laki|lace|lak.|pastwis}} {#var tmpterrain laka};
    #regex {$gmcp_short} {%i{pole|pola}} {#var tmpterrain pole};
    #regex {$gmcp_short} {%i{gaszcz|chaszcz|wrzos}} {#var tmpterrain gaszcz};
    #nop LAD PRZY WODZIE;
    #regex {$gmcp_short} {%i{brzez|brzeg}} {#var tmpterrain brzeg};
    #regex {$gmcp_short} {%iplaz} {#var tmpterrain plaza};
    #regex {$gmcp_short} {%iskarp} {#var tmpterrain plaza};
    #nop PUSTYNIE;
    #regex {$gmcp_short} {%iwydm} {#var tmpterrain pustynia}; 
    #regex {$gmcp_short} {%i{pustkow|pustyn}} {#var tmpterrain pustynia}; 
    #nop WODA;
    #regex {$gmcp_short} {%istrum} {#var tmpterrain rzeka}; 
    #regex {$gmcp_short} {%i{rzeka|rzek|rzeczn}} {#var tmpterrain rzeka}; 
    #regex {$gmcp_short} {%i{rzeka|rzek|rzeczn}} {#var tmpterrain rzeka}; 
    #regex {$gmcp_short} {%izatok} {#var tmpterrain rzeka}; 
    #regex {$gmcp_short} {%ijezior} {#var tmpterrain rzeka}; 
    #regex {$gmcp_short} {%isadzaw} {#var tmpterrain rzeka};        
    #nop MOKRE ZIEMIE;
    #regex {$gmcp_short} {%ibagn} {#var tmpterrain bagno};  
    #regex {$gmcp_short} {%imoczar} {#var tmpterrain bagno};  
    #nop PODZIEMIA;
    #regex {$gmcp_short} {%ijaskin} {#var tmpterrain jaskinia};
    #regex {$gmcp_short} {%igrot} {#var tmpterrain jaskinia};
    #regex {$gmcp_short} {%izasypan} {#var tmpterrain tunel};
    #regex {$gmcp_short} {%itunel} {#var tmpterrain tunel};
    #regex {$gmcp_short} {%iloszek} {#var tmpterrain tunel};
    #regex {$gmcp_short} {%ikrypt} {#var tmpterrain krypta};
    #regex {$gmcp_short} {%imauzole} {#var tmpterrain krypta};
    #regex {$gmcp_short} {%igrob} {#var tmpterrain krypta};
    #nop WNETRZA;
    #regex {$gmcp_short} {%ikorytarz} {#var tmpterrain korytarz};
    #regex {$gmcp_short} {%i{sala|salk|sali|izba|izbie}} {#var tmpterrain wnetrze};
    #regex {$gmcp_short} {%ipokoj} {#var tmpterrain wnetrze};
    #regex {$gmcp_short} {%i{chata|chacie|chat|stajn}} {#var tmpterrain chata};
    #regex {$gmcp_short} {%i{plac|targ}} {#var tmpterrain plac};
    #nop ZWIAZANE Z PRZEJSCIEM;
    #regex {$gmcp_short} {%iszczelin} {#var tmpterrain szczelina};
    #regex {$gmcp_short} {%i{wnek|wnece}} {#var tmpterrain szczelina};
    #regex {$gmcp_short} {%iprzepasc} {#var tmpterrain przepasc};
    #regex {$gmcp_short} {%istudni} {#var tmpterrain studnia_b}; 
    #regex {$gmcp_short} {%i{most|moscie}} {#var tmpterrain most}; 
    #nop KULTY;
    #regex {$gmcp_short} {%isanktuarium} {#var tmpterrain swiatynia};
    #regex {$gmcp_short} {%isymbol} {#var tmpterrain symbol};
    #regex {$gmcp_short} {%i{oltarz|kaplic}} {#var tmpterrain oltarz};
    #regex {$gmcp_short} {%icmentarz} {#var tmpterrain cmentarz};
    #nop DROGI;
    #regex {$gmcp_short} {%i{zaulek|zaulk}} {#var tmpterrain zaulek};        
    #regex {$gmcp_short} {%i{slepy|slepa}} {#var tmpterrain zaulek};

    #regex {$gmcp_short} {%i{zakret|rozwidleni|skrzyzowan|avenue}} {#var tmpterrain droga};
    #regex {$gmcp_short} {%i{droga|drogi|drozk}} {#var tmpterrain droga};

    #regex {$gmcp_short} {%i{ulica|rue|ulicz}} {#var tmpterrain droga};
    #regex {$gmcp_short} {%isciezka} {#var tmpterrain sciezka};
    #regex {$gmcp_short} {%igoscini} {#var tmpterrain sciezka};    
    #regex {$gmcp_short} {%itrak} {#var tmpterrain trakt};
    #nop MIASTA;
    #regex {$gmcp_short} {%i{osada|osady|osadz}} {#var tmpterrain osada};    
    #regex {$gmcp_short} {%i{wiosk|wiosc}} {#var tmpterrain wioska};
    #nop GORY;
    #regex {$gmcp_short} {%i{gory|gora|gors|pagor}} {#var tmpterrain gory};
    #regex {$gmcp_short} {%iwzgorz} {#var tmpterrain wzgorze};
    #regex {$gmcp_short} {%iskal} {#var tmpterrain skaly};
    #regex {$gmcp_short} {%irumowisk} {#var tmpterrain skaly};
    #regex {$gmcp_short} {%iprzepasc} {#var tmpterrain skaly};
    #regex {$gmcp_short} {%iwzniesien} {#var tmpterrain skaly};
    #nop NATURA INNE;
    #regex {$gmcp_short} {%i{lawa|lawy}} {#var tmpterrain lawa};
    #regex {$gmcp_short} {%imagm} {#var tmpterrain magma};
    #nop SKLEPY;
    #regex {$gmcp_short} {%isklep} {#var tmpterrain wnetrze};
    #regex {$gmcp_short} {%i{karczm|piekarn|gospod|jadlo}} {#var tmpterrain wnetrze};

    #regex {$gmcp_short} {%ipoczt} {#var tmpterrain poczta};
    #regex {$gmcp_short} {%i{kowal|kuzni}} {#var tmpterrain kowal};
    #regex {$gmcp_short} {%ibank} {#var tmpterrain bank};
    #regex {$gmcp_short} {%ifontanna} {#var tmpterrain fontanna};

    #if {"$tmpterrain" != ""} {
        #nop;
        #nop map set roomterrain $tmpterrain;
    };
} {1};


#ALIAS {fixy}
{
     #map get roomcolor rc;
#if {"$rc" != ""} {
     #line substitute variables {#map exit w color $rc;#map exit e color $rc;#map exit n color $rc;#map exit sw color $rc;#map exit se color $rc;#map exit s color $rc;#map exit ne color $rc;#map exit nw color $rc;#map set roomsymbol {}}
};
}

